#summary A one-page documentation of how to use FindTBB.cmake.
#labels HowTo,Featured,FindTBB.cmake,Docs

== Introduction ==

This web page contains information about an unofficial version of the FindTBB.cmake script I developed for my own TBB programs.

For more information about CMake and TBB:

  * http://www.cmake.org
  * http://www.threadingbuildingblocks.org/

The script eliminates the need to set visual studio build options manually.

The script is used and tested on WinXP. If you use another OS (Vista, Linux, Mac, Sun), please give it a try and contact me for support.

This webpage is updated infrequently- the svn log contains details about bug fixes and updates.

Please send any comments or questions to my email or the issue tracker.

Hannes Hofmann<br />
Lehrstuhl f√ºr Mustererkennung (LME), University of Erlangen, Germany

== Obtaining FindTBB.cmake ==

The code is available in an svn repository: http://findtbb.googlecode.com/svn/trunk

Either checkout the example project:

{{{
svn co http://findtbb.googlecode.com/svn/trunk FindTBB
}}}

Or link the FindTBB.cmake and related files to an existing repository:

{{{
cd my_repository/CMake
svn propset svn:externals "FindTBB http://findtbb.googlecode.com/svn/trunk/CMake/modules" .
}}}

== Usage ==

The script will search for your TBB installation using the environment variable `TBB21_INSTALL_DIR` (or `TBB_INSTALL_DIR` as fallback) which you should create after installing TBB.

Furthermore, you need to set CMake variables `TBB_ARCHITECTURE` and `TBB_COMPILER`. These variables define which version of the TBB library are used and correspond to the path of the lib directory you want to use.<br />
`TBB_ARCHITECTURE` is one of ia32, em64t or itanium<br />
`TBB_COMPILER` is sth. like vc9 or cc3.2.3_libc2.3.2_kernel2.4.21 or cc4.0.1_os10.4.9

The script defines the following CMake variables:

|| `TBB_FOUND` || Is TBB installed and found. ||
|| `TBB_INCLUDE_DIRS` || TBB library headers. ||
|| `TBB_LIBRARY_DIRS` || TBB library directory. ||
|| `TBB_LIBRARIES` || TBB libraries (tbb, tbbmalloc). ||
|| `TBB_DEBUG_LIBRARIES` || TBB libraries with debug symbols (tbb_debug, tbbmalloc_debug). ||

The following examples show how to include the script in your `CMakeLists.txt` file.

{{{
# define TBB_INSTALL_DIR, TBB_ARCHITECTURE and TBB_COMPILER
# TBB_INSTALL_DIR is set using $ENV{TBB21_INSTALL_DIR}
# TBB_COMPILER is detected automatically on Windows
set(TBB_ARCHITECTURE "ia32")

# Add FindTBB directory to CMake's module path
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/../CMake/FindTBB/")

# Execute the FindTBB macro
find_package(TBB)
# If you want FindTBB to fail if TBB is not found, use this form:
# find_package(TBB REQUIRED)

if(NOT TBB_FOUND)
        MESSAGE (STATUS "TBB not found. Example project will not be built.")
else(NOT TBB_FOUND)

# Here goes the actual project
include_directories(${TBB_INCLUDE_DIRS})
link_directories(${TBB_LIBRARY_DIRS})
add_executable(FindTBB_example ${FindTBB_example_SRCS_CPP})

endif(NOT TBB_FOUND)
}}}


=== Linux ===

FindTBB.cmake was developed under Windows and does not work perfectly under Linux yet. This is how I made it work, when I needed it but had no time to automate the detection of the environment.

At the beginning of your `CMakeLists.txt` write:
{{{
# Install directory of TBB. (w/o trailing slash)
set(TBB_INSTALL_DIR "~/tbb21_014oss")
set(TBB_ARCHITECTURE "build")
set(TBB_COMPILER "linux_em64t_gcc_cc4.3.3_libc2.4_kernel2.6.16.54_release")

set(TBB_INCLUDE_DIRS "${TBB_INSTALL_DIR}/include")
set(TBB_LIBRARY_DIRS "${TBB_INSTALL_DIR}/${TBB_ARCHITECTURE}/${TBB_COMPILER}")
set(TBB_LIBRARIES "tbb")
set(TBB_FOUND 1) # not really, but hey it works!
}}}

and then remove (or comment out) the find_package call:
{{{
#find_package(TBB)
}}}

This was sufficient for my project. Hopefully it works for you, too. Comments and improvements to make FindTBB work more smoothly on Linux are appreciated.


== Building the Example Project ==

Below is an example of the commands needed to build the example project on Windows. On linux the process is roughly the same except that command line tools have to be used.

  # Use TortoiseSVN to check out FindTBB.cmake from http://findtbb.googlecode.com/svn/trunk/ to D:\FindTBB-test\svn\
  # Copy the file `sub_string_finder.cpp` from Intel's TBB examples to D:\FindTBB-test\svn\src\
  # Open cmake-gui (currently beta) and use D:\FindTBB-test\svn\ and D:\FindTBB-test\build\ as source and build directories respectively
  # Press 'Configure', select your VS version and wait
  # Press 'Configure' again
  # Press 'Generate'
  # Go to D:\FindTBB-test\build\ and open FindTBB_pkg.sln


== License ==

This script is released under the MIT license.


== Thanks ==
... to [http://www.sci.utah.edu/~abe/ Abe Stephens] for his [http://www.sci.utah.edu/~abe/FindCuda.html FindCuda] homepage which I took a lot of inspiration from.